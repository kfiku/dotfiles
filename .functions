# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
    if [ -f "$1" ] ; then
        local filename=$(basename "$1")
        local foldername="${filename%%.*}"
        local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
        local didfolderexist=false
        if [ -d "$foldername" ]; then
            didfolderexist=true
            read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
            echo
            if [[ $REPLY =~ ^[Nn]$ ]]; then
                return
            fi
        fi
        mkdir -p "$foldername" && cd "$foldername"
        case $1 in
            *.tar.bz2) tar xjf "$fullpath" ;;
            *.tar.gz) tar xzf "$fullpath" ;;
            *.tar.xz) tar Jxvf "$fullpath" ;;
            *.tar.Z) tar xzf "$fullpath" ;;
            *.tar) tar xf "$fullpath" ;;
            *.taz) tar xzf "$fullpath" ;;
            *.tb2) tar xjf "$fullpath" ;;
            *.tbz) tar xjf "$fullpath" ;;
            *.tbz2) tar xjf "$fullpath" ;;
            *.tgz) tar xzf "$fullpath" ;;
            *.txz) tar Jxvf "$fullpath" ;;
            *.zip) unzip "$fullpath" ;;
            *) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# find shorthand
function f() {
    find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

# Clone git repos from local git
function clone() {
    git clone $GIT_URL/$1 $2
}

# refresh nginx and php fpm
function r() {
    sudo service nginx restart
    sudo service php5-fpm restart
}

# short git status
function shortStatus() {
    # echo $1
    if [[ -d $1/.git ]]; then
        cd $1
        
        remote=$(git config --get remote.origin.url)
        remote="${remote/$GIT_URL\//}"
        
        branch=$(git rev-parse --abbrev-ref HEAD)
        modifed=$(git status | grep 'modified:' | wc -l)
        toPush=$(git log origin/$branch..$branch  | grep commit | wc -l)
        untracked=$(git ls-files --others --exclude-standard | wc -l)
        
        info=""
        infoUntracked=""
        if [[ $modifed > 0 ]]; then
            info="$info modifed: $modifed"
        fi
        
        if [[ $toPush > 0 ]]; then
            info="$info toPush: $toPush"
        fi
        
        if [[ $untracked > 0 ]]; then
            infoUntracked="$infoUntracked untracked: $untracked"
        fi
        
        if [[ ! -z $info ]]; then
            echo -e "\e[41m$remote\e[0m $info $infoUntracked"
        else
            echo -e "\e[32m$remote\e[0m $infoUntracked"
        fi
        if [[ $modifed > 0 || $untracked > 0 ]]; then
            echo "$(git status -s)"
        fi
    fi
}

# git status for all dirs 
function gs() {
    if [[ $1 ]]; then
        cd $1
    fi
    
    currentDir=$(echo $PWD)
    echo "$(shortStatus $currentDir)"
    
    for D in `find . -type d -name .git 2>/dev/null`
    do
        echo "$(shortStatus $currentDir/$D/..)"
    done
    
    cd $currentDir
}

function json() {
    curl -sb -H "Accept: application/json" $1 | underscore print --color
}

function t() {
    tree -L ${1:-1}
}